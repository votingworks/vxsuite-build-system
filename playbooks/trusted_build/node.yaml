---
- name: Manage Node Install
  hosts: 127.0.0.1
  connection: local
  become: true

  tasks:

    - import_tasks: shared_tasks/user_to_configure.yaml
    - import_tasks: shared_tasks/well_known_paths.yaml

    - name: Define downloads_directory from well_known_paths
      set_fact:
        downloads_directory: "{{ well_known_paths['tools']['system_path'] }}"

    - name: Determine system architecture
      set_fact:
        architecture: "{{ 'arm64' if (ansible_architecture == 'aarch64' or ansible_architecture == 'arm64') else 'x64' if (ansible_architecture == 'x86_64') else 'unsupported' }}"

    - name: Remove pre-packaged Node (if present)
      ansible.builtin.package:
        name: nodejs
        state: absent

    - name: Install/Upgrade Node on supported architectures
      block:

        - name: Set Node release URL
          set_fact:
            release_url: "https://nodejs.org/dist/v{{ node_version }}/node-v{{ node_version }}-linux-{{ architecture }}.tar.gz"

        - name: Find the appropriate checksum for the download
          ansible.builtin.shell:
            cmd: "curl --silent https://nodejs.org/dist/v{{ node_version }}/SHASUMS256.txt | grep node-v{{ node_version }}-linux-{{ architecture }}.tar.gz | cut -d' ' -f1"
          register: node_checksum

        - name: Download Node tarball
          ansible.builtin.get_url:
            url: "{{ release_url }}"
            dest: "{{ downloads_directory }}/node-{{ node_version }}.tar.gz"
            checksum: "sha256:{{ node_checksum.stdout }}"
          tags:
            - online

        #-- We always extract node since npm is needed to download/install, 
        #-- depending on which phase we are in. This extracted binary will 
        #-- not be copied to the offline VM, only the above tarball
        - name: Extract Node
          ansible.builtin.unarchive:
            src: "{{ downloads_directory }}/node-{{ node_version }}.tar.gz"
            dest: /usr/local
            remote_src: yes
            extra_opts:
              - --strip-components=1
          tags:
            - always

        - name: Download package managers
          command: "npm pack --pack-destination {{ downloads_directory }} {{ item }}"
          loop: "{{ npm_packages }}"
          tags:
            - online

        - name: See if corepack is present
          command: "which corepack"
          register: corepack_installed
          ignore_errors: yes
          tags:
            - offline

        - name: Disable corepack if installed
          command: corepack disable
          when: corepack_installed.rc == 0
          tags:
            - offline

        - name: Install package managers
          command: "npm install -g {{ downloads_directory }}/{{ item | replace('@', '-') }}.tgz"
          loop: "{{ npm_packages }}"
          tags:
            - offline

      when: architecture != 'unsupported'


