---
- name: Build a FIPS-compliant version of OpenSSL
  hosts: 127.0.0.1
  connection: local
  become: true

  tasks:

    - import_tasks: shared_tasks/user_to_configure.yaml
    - import_tasks: shared_tasks/well_known_paths.yaml

    - name: Set the OpenSSL version
      set_fact:
        openssl_version: "{{ openssl_version | default('3.0.9') }}"

    - name: Define downloads_directory from well_known_paths
      set_fact:
        downloads_directory: "{{ well_known_paths['tools']['system_path'] }}"

    - name: Prebuilt package download path
      set_fact:
        prebuilt_pkg_url: "https://votingworks-apt-snapshots.s3.us-west-2.amazonaws.com/openssl-fips_{{ openssl_version }}_amd64.deb"

    - name: Try to download a prebuilt package
      ansible.builtin.get_url:
        url: "{{ prebuilt_pkg_url }}"
        dest: "{{ downloads_directory }}/"
      register: openssl_download
      tags:
        - online

    - name: See if the prebuilt package is present
      ansible.builtin.stat:
        path: "{{ downloads_directory }}/openssl-fips_{{ openssl_version }}_amd64.deb"
      register: openssl_package_file

    - name: Build OpenSSL with FIPS enabled when prebuilt package is unavailable
      block:
        - name: Download OpenSSL {{ openssl_version }} source code
          ansible.builtin.get_url:
            url: "https://www.openssl.org/source/openssl-{{ openssl_version }}.tar.gz"
            dest: "{{ downloads_directory }}/"
          tags:
            - online

        - name: Extract OpenSSL {{ openssl_version }} source code
          ansible.builtin.unarchive:
            src: "{{ downloads_directory }}/openssl-{{ openssl_version }}.tar.gz"
            dest: "{{ downloads_directory }}"
            remote_src: yes
          tags:
            - offline

        - name: Configure OpenSSL {{ openssl_version }} with FIPS support
          ansible.builtin.shell:
            chdir: "{{ downloads_directory }}/openssl-{{ openssl_version }}"
            cmd: "./Configure enable-fips"
          tags:
            - offline

        - name: Build the OpenSSL {{ openssl_version }} binaries
          ansible.builtin.shell:
            chdir: "{{ downloads_directory }}/openssl-{{ openssl_version }}"
            cmd: "make"
          tags:
            - offline

        - name: Create a temporary install to build a package for installation
          ansible.builtin.shell:
            chdir: "{{ downloads_directory }}/openssl-{{ openssl_version }}"
            cmd: "make install DESTDIR=/tmp/openssl-build"
          tags:
            - offline

        - name: Create a Debian package via FPM
          ansible.builtin.shell:
            chdir: "{{ downloads_directory }}"
            cmd: "fpm -s dir -t deb -n openssl-fips -v {{ openssl_version }} --description \"FIPS-Enabled OpenSSL {{ openssl_version }}\" -C /tmp/openssl-build"

      when: openssl_download is failed or not openssl_package_file.stat.exists

    - name: Install via the package file
      ansible.builtin.shell:
        chdir: "{{ downloads_directory }}"
        cmd: "dpkg -i openssl-fips_{{ openssl_version }}_amd64.deb"
      tags:
        - offline

    - name: Copy the FIPS module to the system level OpenSSL install
      ansible.builtin.copy:
        src: "/usr/local/lib64/ossl-modules/fips.so"
        dest: "/usr/lib/x86_64-linux-gnu/ossl-modules/fips.so"
        remote_src: yes
      tags:
        - offline

    - name: Copy the OpenSSL {{ openssl_version }} config file
      ansible.builtin.copy:
        src: "files/openssl-{{ openssl_version }}.cnf"
        dest: "/etc/ssl/openssl.cnf"
      tags:
        - offline
