---

# TODO: we only have one repo (main) in our self-hosted setup
#       some packages come from other repos, e.g. non-free-firmware
#       The snapshot.debian.org url for those packages will be generated
#       with "main" rather than the appropriate repo, resulting in a broken
#       link. Need to figure out how to handle this.

- name: Generate a report of COTS tools used for this build
  hosts: 127.0.0.1
  connection: local
  become: true

  tasks:
    - name: Set the csv filename
      set_fact:
        cots_csv_file: "/tmp/cots_report.csv"

    - name: Delete the file if it already exists
      ansible.builtin.file:
        path: "{{ cots_csv_file }}"
        state: absent

    # Rust version and checksum
    #
    - name: Determine system architecture for appropriate Rust install
      set_fact: 
        rust_architecture: "{{ 'aarch64' if (ansible_architecture == 'aarch64' or ansible_architecture == 'arm64') else 'x86_64' if (ansible_architecture == 'x86_64') else 'unsupported' }}"

    - name: Define Rust tarball name
      set_fact: 
        rust_tarball: "rust-{{ rust_version }}-{{ rust_architecture }}-unknown-linux-gnu.tar.gz"

    - name: Define the URL to download the appropriate Rust tarball
      set_fact:
        rust_tarball_url: "https://static.rust-lang.org/dist/{{ rust_tarball }}"

    - name: Define Rust manifest name
      set_fact: 
        rust_manifest: "channel-rust-{{ rust_version }}.toml"

    - name: Define URL to Rust channel manifest for this version
      set_fact:
        rust_manifest_url: "https://static.rust-lang.org/dist/{{ rust_manifest }}"

    - name: Download Rust channel manifest for this version
      ansible.builtin.get_url:
        url: "{{ rust_manifest_url }}"
        dest: "/tmp/{{ rust_manifest }}"

    - name: Find the sha256 hash for our version
      ansible.builtin.shell:
        cmd: "grep -A1 {{ rust_tarball }} /tmp/{{ rust_manifest }} | grep hash | cut -d'=' -f2 | xargs"
      register: rust_checksum_from_manifest

    - name: Add Rust to COTS report
      ansible.builtin.shell:
        cmd: >
          echo "{{ rust_tarball_url }},{{ rust_tarball }},{{ rust_version }},,{{ rust_checksum_from_manifest.stdout }}" >> {{ cots_csv_file }}

    # Node version and checksum
    #
    - name: Determine system architecture for Node
      set_fact:
        node_architecture: "{{ 'arm64' if (ansible_architecture == 'aarch64' or ansible_architecture == 'arm64') else 'x64' if (ansible_architecture == 'x86_64') else 'unsupported' }}"

    - name: Set the Node filename
      set_fact:
        node_tarball: "node-v{{ node_version }}-linux-{{ node_architecture }}.tar.gz"

    - name: Set Node release URL
      set_fact:
        node_release_url: "https://nodejs.org/dist/v{{ node_version }}/{{ node_tarball }}"

    - name: Define the Node {{ node_version }} checksum file path
      set_fact:
        node_checksums_file: "/tmp/node-{{ node_version }}.checksums"

    - name: Download the Node {{ node_version }} SHA256 reference
      ansible.builtin.get_url:
        url: "https://nodejs.org/dist/v{{ node_version }}/SHASUMS256.txt"
        dest: "{{ node_checksums_file }}" 

    - name: Find the appropriate checksum for Node {{ node_version }}
      ansible.builtin.shell:
        cmd: "grep node-v{{ node_version }}-linux-{{ node_architecture }}.tar.gz {{ node_checksums_file }} | cut -d' ' -f1"
      register: node_checksum

    - name: Add Node to COTS report
      ansible.builtin.shell:
        cmd: >
          echo "{{ node_release_url }},{{ node_tarball }},{{ node_version }},,{{ node_checksum.stdout }}" >> {{ cots_csv_file }}

    # Apt packages versions and checksums
    #
    # Due to how packages are archived to Debian snapshots
    # we need to use a date two days in the future to handle
    # edge cases in which a package is archived after our self-hosted
    # repo is created
    - name: Set the snapshot date to use with Debian's snapshots
      ansible.builtin.shell:
        cmd: date -d "{{ apt_snapshot_date }} + 2 days" +%Y%m%d
      register: debian_snapshot_date

    - name: Set the apt repo URL
      ansible.builtin.uri:
        url: "https://snapshot.debian.org/archive/debian/{{ debian_snapshot_date.stdout }}"
        return_content: no
        follow_redirects: all
      register: apt_url

    - name: Create the combined list
      set_fact:
        combined_packages: "{{ all_packages + tpm_packages }}"

    - name: Dedupe the list
      set_fact:
        deduped_packages: "{{ combined_packages | unique | select | list }}"

    - name: Get the filename in the apt repo
      ansible.builtin.shell:
        cmd: >
          apt-cache show {{ item }} | grep "Filename:" | 
          cut -d' ' -f2
      loop: "{{ deduped_packages }}"
      register: apt_filenames

    - name: Get the SHA256 hash
      ansible.builtin.shell:
        cmd: >
          apt-cache show {{ item }} | grep "SHA256:" | 
          cut -d' ' -f2
      loop: "{{ deduped_packages }}"
      register: apt_checksums

    - name: Get the version
      ansible.builtin.shell:
        cmd: >
          apt-cache show {{ item }} | grep "Version:" | 
          cut -d' ' -f2
      loop: "{{ deduped_packages }}"
      register: apt_versions

    # The regex_replace filter is necessary to remove a Debian versioning
    # convention that is not used in snapshot.debian.org package names
    - name: Print COTS for apt packages
      ansible.builtin.shell:
        cmd: >
          echo "{{ apt_url.url }}{{ item.1.stdout | regex_replace('\d+%3a', '') }},{{ item.1.stdout | split('/') | last }},{{ item.3.stdout }},,{{ item.2.stdout }}" >> {{ cots_csv_file }}
      loop: "{{ deduped_packages | zip(apt_filenames.results, apt_checksums.results, apt_versions.results) | list }}"

