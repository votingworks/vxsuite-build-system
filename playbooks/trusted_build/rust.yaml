---
#-- NOTE: Rust standalone installers do not support gpg validation any more
#-- sha256 checksums are provided though via a manifest provided for each version
- name: Trusted Build Install of Rust
  hosts: 127.0.0.1
  connection: local
  become: true

  tasks:

    - import_tasks: shared_tasks/user_to_configure.yaml
    - import_tasks: shared_tasks/well_known_paths.yaml

    - name: Define downloads_directory from well_known_paths
      set_fact:
        downloads_directory: "{{ well_known_paths['tools']['system_path'] }}"

    - name: Determine system architecture for appropriate Rust install
      set_fact: 
        architecture: "{{ 'aarch64' if (ansible_architecture == 'aarch64' or ansible_architecture == 'arm64') else 'x86_64' if (ansible_architecture == 'x86_64') else 'unsupported' }}"

    - name: Define the URL to download the appropriate Rust tarball
      set_fact:
        rust_tarball_url: "https://static.rust-lang.org/dist/rust-{{ rust_version }}-{{ architecture }}-unknown-linux-gnu.tar.gz"
      tags:
        - online

    - name: Define URL to Rust channel manifest for this version
      set_fact:
        rust_manifest_url: "https://static.rust-lang.org/dist/channel-rust-{{ rust_version }}.toml"
      tags:
        - online

    - name: Override user if local_user is defined
      set_fact:
        user_to_configure: "{{ local_user }}"
      when: (local_user is defined) and (local_user|length > 0)

    - name: Download Rust
      ansible.builtin.get_url:
        url: "{{ rust_tarball_url }}"
        dest: "{{ downloads_directory }}/rust-{{ rust_version }}-{{ architecture }}-unknown-linux-gnu.tar.gz"
      tags:
        - online

    - name: Download Rust channel manifest for this version
      ansible.builtin.get_url:
        url: "{{ rust_manifest_url }}"
        dest: "{{ downloads_directory }}/rust-{{ rust_version }}.toml"
      tags:
        - online

    - name: Find the sha256 hash for our version
      ansible.builtin.shell:
        cmd: "grep -A1 rust-{{ rust_version }}-{{ architecture }}-unknown-linux-gnu.tar.gz {{ downloads_directory }}/rust-{{ rust_version }}.toml | grep hash | cut -d'=' -f2 | xargs"
      register: rust_checksum_from_manifest

    - name: Generate checksum of the downloaded Rust installer
      ansible.builtin.stat:
        path: "{{ downloads_directory }}/rust-{{ rust_version }}-{{ architecture }}-unknown-linux-gnu.tar.gz"
      register: rust_checksum_from_download

    - name: Error and exit if checksums are not valid (skipping is good)
      ansible.builtin.fail:
        msg: "Error! The checksum for the Rust installer does not match."
      when: rust_checksum_from_manifest.stdout != rust_checksum_from_download.stat.checksum

    - name: Extract Rust to tmp
      ansible.builtin.unarchive:
        src: "{{ downloads_directory }}/rust-{{ rust_version }}-{{ architecture }}-unknown-linux-gnu.tar.gz"
        dest: /var/tmp
        remote_src: yes
      become: true
      become_user: "{{ user_to_configure }}"
      tags:
        - offline

    - name: Install Rust {{ rust_version }} as {{ user_to_configure }}
      ansible.builtin.shell:
        cmd: "./install.sh --prefix=~{{ user_to_configure }}/.cargo "
        chdir: "/var/tmp/rust-{{ rust_version }}-{{ architecture }}-unknown-linux-gnu"
      become: true
      become_user: "{{ user_to_configure }}"
      tags:
        - offline

    - name: Ensure Rust is in {{ user_to_configure }} path
      ansible.builtin.lineinfile:
        path: "~{{ user_to_configure }}/.bashrc"
        line: 'PATH=$HOME/.cargo/bin:$PATH'
      tags:
        - offline
