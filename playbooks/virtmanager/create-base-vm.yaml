- name: Create base VM from ISO
  hosts: localhost
  become: yes

  vars:
    current_url: "https://cdimage.debian.org/debian-cd/current/amd64/iso-cd"

  tasks:

    - name: Allocate 60% of system RAM for the VM
      set_fact:
        vm_ram: "{{ (ansible_facts['memtotal_mb'] * 0.60)|round(0, 'floor')|int }}"

    - name: Allocate 80% of system CPU for the VM
      set_fact:
        vm_cpus: "{{ (ansible_facts['processor_nproc'] * 0.80)|round(0, 'floor')|int }}"

    - name: Check if the Debian ISO is already downloaded
      ansible.builtin.stat:
        path: "{{ virt_image_path }}/{{ iso_name }}"
      register: debian_iso_file

    - name: Download the Debian ISO if not already downloaded
      block:
        - name: Download Debian ISO from current url
          get_url: 
            url: "{{ current_url }}/{{ iso_name }}"
            dest: "{{ virt_image_path }}/{{ iso_name }}"
          register: current_download
          failed_when: false 

        - name: Download Debian ISO from archive url if current was not available
          get_url: 
            url: "{{ iso_url }}/{{ iso_name }}"
            dest: "{{ virt_image_path }}/{{ iso_name }}"
          when: current_download.status_code == 404 

      when: not debian_iso_file.stat.exists or not debian_iso_file.stat.isreg

    - name: See if virt networking is active
      shell: 
        cmd: virsh net-info default | grep Active | grep yes
      register: is_virt_networking_running
      changed_when: no
      failed_when: false

    - name: Make sure virt networking is active
      command: virsh net-start default
      when: is_virt_networking_running.rc != 0

    - name: Check if the {{ vm_name }} VM already exists
      shell:
        cmd: virsh dominfo {{ vm_name }}
      register: does_vm_exist
      changed_when: no
      failed_when: false

    - name: Copy the preseed file
      ansible.builtin.copy:
        src: "{{ vm_preseed_path }}/{{ vm_preseed_file }}"
        dest: "/tmp/{{ vm_preseed_file }}"
        remote_src: yes

    - name: Prepare the preseed file
      ansible.builtin.blockinfile:
        path: "/tmp/{{ vm_preseed_file }}"
        block: |
          d-i preseed/late_command string \
              wget -O "/target/etc/apt/trusted.gpg.d/votingworks-apt-{{ apt_snapshot_date }}.asc" "https://votingworks-apt-snapshots.s3.us-west-2.amazonaws.com/{{ apt_snapshot_date }}/votingworks-apt-{{ apt_snapshot_date }}.pub"; \
              echo "deb [check-valid-until=no signed-by=/etc/apt/trusted.gpg.d/votingworks-apt-{{ apt_snapshot_date }}.asc] http://votingworks-apt-snapshots.s3.us-west-2.amazonaws.com/{{ apt_snapshot_date }}/{{ apt_snapshot_date }}/ {{ release_name }} main" > /target/etc/apt/sources.list; \
              in-target apt-get -y update;
      when: (apt_snapshot_date is defined) and (release_name is defined)

    - name: Create the {{ vm_name }} VM (This will take several minutes)
      command: >
        virt-install
        --name={{ vm_name }}
        --ram={{ vm_ram }}
        --vcpus={{ vm_cpus }}
        --osinfo linux2022
        --noreboot
        --noautoconsole
        --wait
        --location={{ virt_image_path }}/{{ iso_name }}
        --network bridge=virbr0,model=virtio
        {{ '--boot loader=/usr/share/OVMF/OVMF_CODE_4M.secboot.fd,loader.readonly=yes,loader.type=pflash,loader.secure=yes' if ( secure_boot ) else ' ' }}
        --console pty,target_type=serial
        {{ '--features smm=yes' if ( secure_boot ) else ' ' }}
        --check disk_size=off
        --disk path={{ virt_image_path }}/{{ vm_name }}.img,size={{ vm_disk_size_gb }},format=raw
        --initrd-inject=/tmp/{{ vm_preseed_file }}
        --extra-args="auto=true priority=critical preseed/file=/{{ vm_preseed_file }} hostname=vx domain=local console=ttyS0,115200n8 serial"
      register: output
      when: does_vm_exist.rc != 0

    - name: Remove the cdrom definition
      ansible.builtin.command:
        cmd: sed -i "/<disk type='file' device='cdrom'>/,/<\/disk>/ d" /etc/libvirt/qemu/{{ vm_name }}.xml 

    - name: Check if scsi device already exists
      ansible.builtin.command:
        cmd: grep "<controller type='scsi' index='0' model='virtio-scsi'>" /etc/libvirt/qemu/{{ vm_name }}.xml
      register: scsi_exists
      failed_when: false

    - name: Add scsi device
      ansible.builtin.command:
        cmd: sed -i "/<\/disk>/ a <controller type='scsi' index='0' model='virtio-scsi'>\n  <address type='pci' domain='0x0000' bus='0x07' slot='0x00' function='0x0'\/>\n<\/controller>" /etc/libvirt/qemu/{{ vm_name }}.xml
      when: scsi_exists.rc != 0

    - name: Update the {{ vm_name }} VM with device changes
      ansible.builtin.command:
        cmd: "virsh define /etc/libvirt/qemu/{{ vm_name }}.xml"
